# -*- coding: utf-8 -*-
"""untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/KhoiNguyen-sudo/e1cc9374756226b8a01c8c2d8c827d74/untitled0.ipynb

**Nhiệm vụ chính là xử lý dữ liệu , sàn lọc dữ liệu  **  
* Get data 
*   Xử lý như thế nào( nhiều cách, thông minh, cho khoa học dữ liệu bằng phần mềm, code, bằng tay) và ( chuẩn hóa dữ liệu để phục vụ cho bài toán  )  
* Làm sạch dữ liệu 
* Mục đích dữ liệu để dùng cho bài toán  Logistic Regression  
* Trực quan dữ liệu và lưu trữ dữ liệu 
* Lưu trữ dữ liệu bằng csv, excel, lưu ở github hoặc lưu trên máy tính  
LƯU Ý: DÙNG NGÔN NGỮ PYTHON

Đề bài: XỬ LÝ DỮ LIỆU ĐỂ DỰ BÁO DIỄN BIẾN 
DỊCH BỆNH COVID 19 cho các nước: Nhật bản, việt nam, hàn quốc, thái lan
* Lưu ý: dữ liệu phục vụ cho bài toán Logistic Regression . 
* Yêu cầu phải cột như sau: total_cases,  total_deaths, date,iso_code

# **Dữ liệu**
Dữ liệu có liên quan đến các ca nhiễm covid - 19 của tổ chức y tế thế giới WHO. Mục tiêu là dự đoán có bao nhiêu ca nhiễm trong thời gian năm 2023 
* Bộ dữ liệu này cung cấp số ca nhiễm trên toàn thế giới.
"""

# Gọi thư viện cần thiết 
import pandas as pd
import numpy as np  
from sklearn import preprocessing # Thư viện tiền xử lý dữ liệu
import matplotlib.pyplot as plt # Thư viện  trực quan hóa 
plt.rc("font", size=20) # đặt kích thước font chữ là 14 
from sklearn.linear_model import LogisticRegression # Thư viện hồi quy tuyến tính 
from sklearn.model_selection import train_test_split # Thư viện dùng để train dữ liệu
import  seaborn as sns # trực quan hóa dữ liệu
sns.set(style="white") # Vẽ phong nền trắng và không đường viền 
sns.set(style="whitegrid", color_codes=True) # Vẽ nền trắng, có đường viền 
# Lấy dữ liệu từ Tổ Chức WHO
url = 'https://covid.ourworldindata.org/data/owid-covid-data.csv'
# xuất kết quả
data = pd.read_csv(url)
print(data.shape) # hiện thị số dòng, số cột
print(list(data.columns)) # Hiện thị tên các cột

data.head(10) # Hiện thị 10 dòng đầu tiên

"""# **Dữ liệu đầu vào** 


1. iso_code: Mã quốc gia. 
2. continent: Khu vực quốc gia
3. location: vị trí địa lý  
4. date: Ngày tháng năm 
5. total_cases: Tổng số trường hợp được xác nhận của COVID-19. 
6. total_deaths: Tổng số ca tử vong do COVID-19.




# **Mục tiêu mong muốn**

# **bold text**
"""

# Xóa các cột không cần thiết 
dropdata = data.drop([ "population","continent","new_cases","new_cases_smoothed","new_deaths","new_deaths_smoothed","total_cases_per_million","new_cases_per_million","new_cases_smoothed_per_million","total_deaths_per_million","new_deaths_per_million","new_deaths_smoothed_per_million","reproduction_rate","icu_patients","icu_patients_per_million","hosp_patients","hosp_patients_per_million","weekly_icu_admissions","weekly_icu_admissions_per_million","weekly_hosp_admissions","weekly_hosp_admissions_per_million","total_tests","new_tests","total_tests_per_thousand","new_tests_per_thousand","new_tests_smoothed","new_tests_smoothed_per_thousand","positive_rate","tests_per_case","tests_units","total_vaccinations","people_vaccinated","people_fully_vaccinated","total_boosters","new_vaccinations","new_vaccinations_smoothed","total_vaccinations_per_hundred","people_vaccinated_per_hundred","people_fully_vaccinated_per_hundred","total_boosters_per_hundred","new_vaccinations_smoothed_per_million","new_people_vaccinated_smoothed","new_people_vaccinated_smoothed_per_hundred","stringency_index","population_density","median_age","aged_65_older","aged_70_older","gdp_per_capita","extreme_poverty","cardiovasc_death_rate","diabetes_prevalence","female_smokers","male_smokers","handwashing_facilities","hospital_beds_per_thousand","life_expectancy","human_development_index","excess_mortality_cumulative_absolute","excess_mortality_cumulative","excess_mortality","excess_mortality_cumulative_per_million"], axis=1)
print(dropdata)

# Xử lý dữ liệu bị thiếu bằng cách chèn số 0
fill_data = dropdata.fillna(0) 
print(fill_data)

# Chuẩn hóa dữ liệu 0 và 1
fill_data.loc[fill_data['total_cases'] > 0, 'total_cases'] = 1 
fill_data.loc[fill_data['total_deaths'] > 0, 'total_deaths'] = 1
print( fill_data)

#Thống kê số ca nhiễm của 4 quốc gia: nhật bản, hàn quốc, thái lan, việt nam  
selected_countries = ['Vietnam', 'Japan', 'South Korea', 'Thailand']
filtered_data = fill_data[fill_data['location'].isin(selected_countries)]
pd.crosstab(filtered_data.location,fill_data.total_cases).plot(kind='bar')
plt.title('Biểu đồ cột đôi số ca nhiễm của 4 quốc gia')
plt.xlabel('Quốc gia')
plt.ylabel('Số liệu') 
plt.figure(figsize=(16, 16))
plt.savefig('purchase_fre_job.png')
plt.show()
#Thống kê số ca nhiễm của 4 quốc gia: nhật bản, hàn quốc, thái lan, việt nam  
selected_countries = ['Vietnam', 'Japan', 'South Korea', 'Thailand']
filtered_data = fill_data[fill_data['location'].isin(selected_countries)]
pd.crosstab(filtered_data.location,fill_data.total_deaths).plot(kind='bar')
plt.title('Biểu đồ cột đôi số người chết của 4 quốc gia')
plt.xlabel('Quốc gia')
plt.ylabel('Số liệu')
plt.savefig('purchase_fre_job.png')
plt.show()
# Lưu trữ dữ liệu dưới dạng CSV 
fill_data.to_csv('fill_data.csv', index=False)
# Lưu DataFrame thành file Excel
fill_data.to_excel('fill_data.xlsx', index=False)
